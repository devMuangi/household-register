// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}


model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  image          String?
  password         String?
  isChv   Boolean   @default(false)
  emailVerified DateTime? @map(name: "email_verified")
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")


  @@map(name: "users")
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")


  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model Chu {
  id      Int      @default(autoincrement()) @id 
  name    String? 
  code   String   @unique
  county String  
  division String 
  location  String
  villages         Village[]
  households        Household[]
  facilities        Facility[]
  
    @@map(name: "chus")
}

model Facility {
  id      Int      @default(autoincrement()) @id 
  name    String? 
  chuId           Int
  chu             Chu    @relation(fields: [chuId], references: [id])
    @@map(name: "facilities") 
}
model Village {
  id      Int      @default(autoincrement()) @id 
  name    String? 
  chuId           Int
  chu             Chu    @relation(fields: [chuId], references: [id])
  households        Household[]
    @@map(name: "villages")
}
model Household {
  id      Int      @default(autoincrement()) @id 
  household_number    String? 
  number_of_members    Int? 
  chuId           Int
  chu             Chu    @relation(fields: [chuId], references: [id])
  villageId           Int
  village            Village   @relation(fields: [villageId], references: [id])
  members        Member[]
    @@map(name: "Households")
}
model Member {
  id      Int      @default(autoincrement()) @id 
  name    String?
  age    String?
  sex    String?
  position String?
  householdId           Int
  household            Household    @relation(fields: [householdId], references: [id])
    @@map(name: "members")
}